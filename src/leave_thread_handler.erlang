-module(leave_thread_handler).
-export([init/2]).

init(Req,Opts) ->
    case auth_ball:authenticate(Req) of
		{ok, Data} -> 
			Thread = cowboy_req:binding(threadid, Req),
			UserToRemove = cowboy_req:binding(userid, Req),
			Uid = proplists:get_value(<<"id">>, Data),
			case Uid =:= UserToRemove of
				true ->
					JSONData = db_utils:fetch(Thread),
					{ThreadData} = JSONData,
					UsersInThread = proplists:get_value(<<"users">>, ThreadData),
					UsersInThreadSet = sets:from_list(UsersInThread),
					NewUsers = sets:to_list(sets:del_element(UserToRemove, UsersInThreadSet)),
					NewThreadData = [{<<"users">>, NewUsers}| proplists:delete(<<"users">>, ThreadData)],
					Creator = proplists:get_value(<<"users">>, ThreadData),
					db_utils:put_to_db(Thread, {NewThreadData}),
					web_utils:respond_success(Req2, {NewThreadData}, []);
				false -> 
					web_utils:respond_forbidden(Req, error)
			end;
		Error ->
			web_utils:respond_forbidden(Req, Error)
	end. 